name: PR to Main Handler

on:
  workflow_call:
    inputs:
      development_pr_number:
        required: true
        type: number
      development_pr_creator:
        required: true
        type: string
      reference_branch:
        required: false
        type: string
        default: "development"
    secrets:
      personal_access_token:
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.personal_access_token }}

jobs:
  pr_to_main_handler:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ inputs.reference_branch }} code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.reference_branch }}
          fetch-depth: 0

      - name: Get the last commit SHA
        id: last_commit
        run: echo "::set-output name=sha::$(git rev-parse HEAD)"

      - name: Get PR comments and title
        id: pr_details
        run: |
          pr_data=$(gh pr view ${{ inputs.development_pr_number }} --json title,comments --jq '{title: .title, comments: [.comments[] | select(.body | startswith("/parent")) | .body]}')
          pr_title=$(echo "$pr_data" | jq -r '.title')
          pr_comments=$(echo "$pr_data" | jq -r '.comments | join("\n")')
          echo "::set-output name=title::$pr_title"
          echo "::set-output name=comments::$pr_comments"

      - name: Extract parent PR number (if any)
        id: parent_pr_number
        run: |
          parent_pr=$(echo "${{ steps.pr_details.outputs.comments }}" | grep -oP '/parent #\K\d+')
          echo "::set-output name=parent_pr::$parent_pr"
        continue-on-error: true

      - name: Set Git user
        run: |
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"

      - name: Checkout from main branch
        if: steps.parent_pr_number.outcome == 'failure'
        run: |
          git fetch origin main
          git checkout -b dev-${{ steps.last_commit.outputs.sha }} origin/main

      - name: Checkout from parent PR branch
        if: steps.parent_pr_number.outcome != 'failure'
        run: |
          parent_branch=$(gh pr view ${{ steps.parent_pr_number.outputs.parent_pr }} --json headRefName --jq '.headRefName')
          git fetch origin $parent_branch
          git checkout $parent_branch

      - name: Cherry-pick the last commit from ${{ inputs.reference_branch }}
        id: cherry_pick
        run: |
          git cherry-pick -m 1 ${{ steps.last_commit.outputs.sha }}
        continue-on-error: true

      - name: Commit conflicts if cherry pick fails
        if: ${{ steps.cherry_pick.outcome == 'failure' }}
        run: |
          if git status --porcelain | grep '^[MADRCU]'; then
            git add .
            git commit --no-edit
          else
            echo "No changes to commit after resolving conflicts"
          fi

      - name: Push branch
        run: |
          if [ "${{ steps.parent_pr_number.outcome }}" == "failure" ]; then
            git push origin dev-${{ steps.last_commit.outputs.sha }}
          else
            parent_branch=$(gh pr view ${{ steps.parent_pr_number.outputs.parent_pr }} --json headRefName --jq '.headRefName')
            git push origin HEAD:$parent_branch
          fi

      - name: Check for changes
        id: check_changes
        run: |
          git fetch origin main:main
          git rev-parse --verify HEAD
          git rev-parse --verify main
          CHANGES=$(git rev-list --count main..HEAD || echo "0")
          echo "has_changes=$CHANGES" >> $GITHUB_OUTPUT

      - name: Create pull request
        if: steps.parent_pr_number.outcome == 'failure' && steps.check_changes.outputs.has_changes != '0'
        run: |
          if [ "${{ steps.cherry_pick.outcome }}" == "failure" ]; then
            gh pr create -B main -H dev-${{ steps.last_commit.outputs.sha }} --title 'ğŸ”€ [Prod] ${{ steps.pr_details.outputs.title }} - #${{ inputs.development_pr_number }} by @${{ inputs.development_pr_creator }}' --body ':warning: This PR had conflicts with main. Make sure the changes are correct before proceeding. <br> This PR includes changes from the last commit ${{ steps.last_commit.outputs.sha }}, PR \#${{ inputs.development_pr_number }} in ${{ inputs.reference_branch }}.' --assignee ${{ inputs.development_pr_creator }} --draft
          else
            gh pr create -B main -H dev-${{ steps.last_commit.outputs.sha }} --title 'ğŸ”€ [Prod] ${{ steps.pr_details.outputs.title }} - #${{ inputs.development_pr_number }} by @${{ inputs.development_pr_creator }}' --body 'This PR includes changes from the last commit ${{ steps.last_commit.outputs.sha }}, PR \#${{ inputs.development_pr_number }} in ${{ inputs.reference_branch }}.' --assignee ${{ inputs.development_pr_creator }} --draft
          fi

      - name: Show no changes message
        if: steps.check_changes.outputs.has_changes == '0'
        run: |
          echo "No hay cambios para crear un Pull Request. Los cambios ya estÃ¡n presentes en la rama main."
